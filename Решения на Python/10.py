# -*- coding: utf-8 -*-
"""
-------------------------------------------------
Задача C4-10. 
Решение на языке Python 3.
 Автор: Константин Поляков, 2013
E-mail: kpolyakov@mail.ru
   Web: kpolyakov.spb.ru
-------------------------------------------------
В молочных магазинах города Х продается сметана с жирностью 15, 20 и
25 процентов. В городе X был проведен мониторинг цен на сметану.
Напишите эффективную по времени работы и по используемой памяти 
программу, которая будет определять для каждого вида сметаны, сколько
магазинов продают ее дешевле всего. На вход программе сначала подается
число магазинов N. В каждой из следующих N строк находится информация
в следующем формате:
    <Фирма> <Улица> <Жирность> <Цена>
где <Фирма> – строка, состоящая не более, чем из 20 символов без
пробелов, <Улица> – строка, состоящая не более, чем из 20 символов без
пробелов, <Жирность> – одно из чисел – 15, 20 или 25, <Цена> – целое
число в диапазоне от 2000 до 5000, обозначающее стоимость одного литра
сметаны в копейках. <Фирма> и <Улица>, <Улица> и <Жирность>, а также
<Жирность> и <Цена> разделены ровно одним пробелом. Пример входной
строки:
    Перекресток Короленко 25 3200
Программа должна выводить через пробел 3 числа – количество магазинов,
продающих дешевле всего сметану с жирностью 15, 20 и 25 процентов.
Если какой-то вид сметаны нигде не продавался, то следует вывести 0.
Пример выходных данных:
    12 10 0
"""
import sys
save_stdin = sys.stdin
sys.stdin = open("in/10.in")

N = int(input())
res = {}
for i in range(N):
    firm, street, mark, price = input().split()
    mark = int(mark)
    price = int(price)
    prev_data = res.get(mark) # Встречались ли магазины, продающие сметану с этой жирностью
    if prev_data == None: # Если марка жирности встречается впервые - устаналиваем цену и кол-во 1
        res[mark] = (price, 1)
    else: # Если марка жирности уже встречалась,то проверяем цену.
        if price == prev_data[0]: # Если цена совпадает,
            res[mark] = (price, prev_data[1]+1) # То добавляем этот магазин к общему кол-ву
        if price < prev_data[0]: # Если цена меньше,
            res[mark] = (price, 1) # то устанавливаем новую цену для этой марки и сбрасываем счетчик до единицы
for mark in [15, 20, 25]:
    data = res.get(mark)
    if data == None:
        print(0, end = " ")
    else:
        print(data[1], end = " ")

sys.stdin = save_stdin